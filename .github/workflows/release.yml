permissions:
  contents: write

name: Create Daily Release

on:
  push:
    branches:
      - main  # 监听 main 分支的推送

jobs:
  release:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'  # 指定 Python 版本

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install setuptools wheel twine requests

      - name: Generate version and update setup.py
        id: version
        run: |
          DATE=$(date +'%Y%m%d')
          releases=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            "https://api.github.com/repos/${{ github.repository }}/releases")
          count=$(echo "$releases" | jq "[.[] | select(.tag_name | startswith(\"$DATE\"))] | length")
          new_version="$DATE"
          if [ "$count" -gt 0 ]; then
            new_version="${new_version}.${count}"
          fi
          python update_version.py "$new_version"
          echo "VERSION=$new_version" >> $GITHUB_ENV

      - name: Check for changes
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "actions@github.com"
          git add setup.py
          if git commit -m "chore: Auto update version to ${{ env.VERSION }}" --allow-empty; then
            git push
          else
            echo "No changes to commit"
          fi

      - name: Build the package
        run: python setup.py sdist bdist_wheel

      - name: List distribution files  # Optional: Check that files are created
        run: ls dist

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.VERSION }}  # 使用生成的版本号
          body: |
            Automated release created for version ${{ env.VERSION }}.
          files: |
            dist/*
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # 使用 GitHub 提供的令牌

      - name: Publish to PyPI
        run: |
          twine upload dist/*  # 上传到 PyPI
        env:
          TWINE_USERNAME: __token__  # 使用 __token__ 作为用户名
          TWINE_PASSWORD: ${{ secrets.PYPI }}  # 从 Secrets 中获取 PyPI 令牌